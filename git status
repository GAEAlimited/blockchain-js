[1mdiff --git a/blockchain-js-core/src/blockchain-node.ts b/blockchain-js-core/src/blockchain-node.ts[m
[1mindex 3e95ced..bb60818 100644[m
[1m--- a/blockchain-js-core/src/blockchain-node.ts[m
[1m+++ b/blockchain-js-core/src/blockchain-node.ts[m
[36m@@ -134,4 +134,6 @@[m [mapp.post('/lists/:branch/:listName', async (req, res) => {[m
     catch (error) {[m
         res.send(JSON.stringify(error))[m
     }[m
[31m-})[m
\ No newline at end of file[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32m// smart contract facility[m
\ No newline at end of file[m
[1mdiff --git a/blockchain-js-core/src/index.ts b/blockchain-js-core/src/index.ts[m
[1mindex 8aaca36..e3aee18 100644[m
[1m--- a/blockchain-js-core/src/index.ts[m
[1m+++ b/blockchain-js-core/src/index.ts[m
[36m@@ -8,6 +8,7 @@[m [mimport * as SmartContract from './smart-contract'[m
 import * as NodeBrowser from './node-browser'[m
 import * as NetworkApi from './network-api'[m
 import * as NetworkClientBrowserImpl from './network-client-browser-impl'[m
[32m+[m[32mimport * as NetworkApiNodeImpl from './network-api-node-impl'[m
 import * as NodeApi from './node-api'[m
 import * as NodeImpl from './node-impl'[m
 import * as NodeTransfer from './node-transfer'[m
[36m@@ -26,6 +27,7 @@[m [mexport {[m
     NodeBrowser,[m
     NetworkApi,[m
     NetworkClientBrowserImpl,[m
[32m+[m[32m    NetworkApiNodeImpl,[m
     NodeApi,[m
     NodeImpl,[m
     NodeTransfer,[m
[1mdiff --git a/blockchain-js-core/src/smart-contract.ts b/blockchain-js-core/src/smart-contract.ts[m
[1mindex 45f1e3f..32d02a5 100644[m
[1m--- a/blockchain-js-core/src/smart-contract.ts[m
[1m+++ b/blockchain-js-core/src/smart-contract.ts[m
[36m@@ -141,7 +141,6 @@[m [mexport class SmartContract {[m
             let { blockId, items } = sequenceItemsByBlock[idx][m
 [m
             if (!items || !items.length) {[m
[31m-                console.log(`empty contract...`)[m
                 continue[m
             }[m
 [m
[36m@@ -189,6 +188,7 @@[m [mexport class SmartContract {[m
 [m
                         if (contractState.contractPublicKey && contractState.contractPublicKey != HashTools.extractPackedDataPublicKey(packedDescription)) {[m
                             console.error(`iteration does use an incorrect public key`)[m
[32m+[m[32m                            continue[m
                         }[m
 [m
                         contractState.contractIterations[iterationId] = {[m
[1mdiff --git a/blockchain-js-ui/src/app/app.component.ts b/blockchain-js-ui/src/app/app.component.ts[m
[1mindex 8ee5bf6..123f6a1 100644[m
[1m--- a/blockchain-js-ui/src/app/app.component.ts[m
[1m+++ b/blockchain-js-ui/src/app/app.component.ts[m
[36m@@ -429,7 +429,7 @@[m [mexport class AppComponent {[m
   async addPeer(peerHost, peerPort) {[m
     console.log(`add peer ${peerHost}:${peerPort}`)[m
 [m
[31m-    let ws = NETWORK_CLIENT_IMPL.createClientWebSocket(`wss://${peerHost}:${peerPort}/events`)[m
[32m+[m[32m    let ws = NETWORK_CLIENT_IMPL.createClientWebSocket(`${location.protocol=='https'?'wss':'ws'}://${peerHost}:${peerPort}/events`)[m
 [m
     this.addPeerBySocket(ws, `${peerHost}:${peerPort}`, true, `direct peer ${peerHost}:${peerPort}`)[m
   }[m
